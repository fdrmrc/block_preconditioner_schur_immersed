# Listing of Parameters
# ---------------------
subsection Distributed Lagrange<1,2>
set Coupling quadrature order                    = 3
set Dirichlet boundary ids                       = 0, 1, 2, 3
set Velocity space finite element degree         = 2 #Q2-Q1 for (u,p)
set Embedded space finite element degree         = 1 #Q1 for lambda
set Initial embedded space refinement            = 5
set Initial background space refinement          = 5
set Local refinements steps near embedded domain = 0
set Solver                                       = IBStokesAL
set Verbosity level                              = 10


  subsection Augmented Lagrangian control
set GMG for augmented block            = true
set AMG for augmented block            = false
set Gamma                              = 10
set Gamma Grad-div                     = 10
set Grad-div stabilization             = true
set Diagonal mass immersed             = false #Use diagonal (inverse-squared) of the immersed mass and pressure mass matrix
set Log result                         = true
set Max steps                          = 100
set Tolerance for Augmented Lagrangian = 1.e-4 # default: 1e-4
  end

   subsection Embedded Configuration control
set Radius = 0.21
set x_c    = 0.5
set y_c    = 0.5
  end

  subsection Body force
   # Sometimes it is convenient to use symbolic constants in the expression
   # that describes the function, rather than having to use its numeric value
   # everywhere the constant appears. These values can be defined using this
   # parameter, in the form `var1=value1, var2=value2, ...'.
   #
   # A typical example would be to set this runtime parameter to
   # `pi=3.1415926536' and then use `pi' in the expression of the actual
   # formula. (That said, for convenience this class actually defines both
   # `pi' and `Pi' by default, but you get the idea.)
set Function constants  =

   # The formula that denotes the function you want to evaluate for
   # particular values of the independent variables. This expression may
   # contain any of the usual operations such as addition or multiplication,
   # as well as all of the common functions such as `sin' or `cos'. In
   # addition, it may contain expressions like `if(x>0, 1, -1)' where the
   # expression evaluates to the second argument if the first argument is
   # true, and to the third argument otherwise. For a full overview of
   # possible expressions accepted see the documentation of the muparser
   # library at http://muparser.beltoforion.de/.
   #
   # If the function you are describing represents a vector-valued function
   # with multiple components, then separate the expressions for individual
   # components by a semicolon.
set Function expression = 1;1   # default: 0

   # The names of the variables as they will be used in the function,
   # separated by commas. By default, the names of variables at which the
   # function will be evaluated are `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in
   # 3d) for spatial coordinates and `t' for time. You can then use these
   # variable names in your function expression and they will be replaced by
   # the values of these variables at which the function is currently
   # evaluated. However, you can also choose a different set of names for the
   # independent variables at which to evaluate your function expression. For
   # example, if you work in spherical coordinates, you may wish to set this
   # input parameter to `r,phi,theta,t' and then use these variable names in
   # your function expression.
set Variable names      = x,y,t
  end

  subsection Dirichlet boundary condition
   # Sometimes it is convenient to use symbolic constants in the expression
   # that describes the function, rather than having to use its numeric value
   # everywhere the constant appears. These values can be defined using this
   # parameter, in the form `var1=value1, var2=value2, ...'.
   #
   # A typical example would be to set this runtime parameter to
   # `pi=3.1415926536' and then use `pi' in the expression of the actual
   # formula. (That said, for convenience this class actually defines both
   # `pi' and `Pi' by default, but you get the idea.)
set Function constants  =

   # The formula that denotes the function you want to evaluate for
   # particular values of the independent variables. This expression may
   # contain any of the usual operations such as addition or multiplication,
   # as well as all of the common functions such as `sin' or `cos'. In
   # addition, it may contain expressions like `if(x>0, 1, -1)' where the
   # expression evaluates to the second argument if the first argument is
   # true, and to the third argument otherwise. For a full overview of
   # possible expressions accepted see the documentation of the muparser
   # library at http://muparser.beltoforion.de/.
   #
   # If the function you are describing represents a vector-valued function
   # with multiple components, then separate the expressions for individual
   # components by a semicolon.
set Function expression = 0;0;0 # default: 0

   # The names of the variables as they will be used in the function,
   # separated by commas. By default, the names of variables at which the
   # function will be evaluated are `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in
   # 3d) for spatial coordinates and `t' for time. You can then use these
   # variable names in your function expression and they will be replaced by
   # the values of these variables at which the function is currently
   # evaluated. However, you can also choose a different set of names for the
   # independent variables at which to evaluate your function expression. For
   # example, if you work in spherical coordinates, you may wish to set this
   # input parameter to `r,phi,theta,t' and then use these variable names in
   # your function expression.
set Variable names      = x,y,t
  end

  subsection Embedded value
   # Sometimes it is convenient to use symbolic constants in the expression
   # that describes the function, rather than having to use its numeric value
   # everywhere the constant appears. These values can be defined using this
   # parameter, in the form `var1=value1, var2=value2, ...'.
   #
   # A typical example would be to set this runtime parameter to
   # `pi=3.1415926536' and then use `pi' in the expression of the actual
   # formula. (That said, for convenience this class actually defines both
   # `pi' and `Pi' by default, but you get the idea.)
set Function constants  =

   # The formula that denotes the function you want to evaluate for
   # particular values of the independent variables. This expression may
   # contain any of the usual operations such as addition or multiplication,
   # as well as all of the common functions such as `sin' or `cos'. In
   # addition, it may contain expressions like `if(x>0, 1, -1)' where the
   # expression evaluates to the second argument if the first argument is
   # true, and to the third argument otherwise. For a full overview of
   # possible expressions accepted see the documentation of the muparser
   # library at http://muparser.beltoforion.de/.
   #
   # If the function you are describing represents a vector-valued function
   # with multiple components, then separate the expressions for individual
   # components by a semicolon.
set Function expression = -.5;.5  # default: 0

   # The names of the variables as they will be used in the function,
   # separated by commas. By default, the names of variables at which the
   # function will be evaluated are `x' (in 1d), `x,y' (in 2d) or `x,y,z' (in
   # 3d) for spatial coordinates and `t' for time. You can then use these
   # variable names in your function expression and they will be replaced by
   # the values of these variables at which the function is currently
   # evaluated. However, you can also choose a different set of names for the
   # independent variables at which to evaluate your function expression. For
   # example, if you work in spherical coordinates, you may wish to set this
   # input parameter to `r,phi,theta,t' and then use these variable names in
   # your function expression.
set Variable names      = x,y,t
  end

  subsection Outer solver control
set Log frequency = 1
set Log history   = true
set Log result    = true
set Max steps     = 1000   # default: 100
set Reduction     = 1.e-12 # default: 1.e-2
set Tolerance     = 1.e-10
  end

end


